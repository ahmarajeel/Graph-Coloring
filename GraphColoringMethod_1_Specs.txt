
Project 10.1:  Graph coloring problem:  given a undirected graph, G = <N, E>,  
	the graph coloring problem is to find the minumum number of colors to color all nodes in N, 
	such that two adjacent nodes, ni, nj, can not be colored with the same color.  

	Since this problem is a known N-P problem, 
	we are going to use the first technique taught in class  to solve this problem.

**************************************
Language:  C++ 
Due date:  C++ soft copy: 5/10/2016 Tuesday before Midnight
Due date:  C++ hard copy: 5/12/2016 Thursday in class

*******************************
I.  Input [argv[1]: an undirected graph, represented by a list of edges, <ni, nj>, 
   (a bidirectional edge from ni to nj and from nj to ni thw cost is c.)  
/**The name of the input file should be given in argv[1].

The first text line is the number of nodes, N, in G, follows by a list of bidirectional edges, <ni, nj>
	For example:
		5	// there are 5 nodes in the graph 
		1  5  // an edge <1, 5> and <5, 1>
    		2  3  // an edge <2, 3> and <3, 2>
     		1  2  // an edge <1, 2> and <2, 1>
		3  5  // an edge <3, 5> and < 5, 3>
          	  	
II. Output(argv[2]):
           - Print input pairs
		- Print the initial adjacencyMatrix of the graph.
		- Pring the number of colors used to color.
		- Print the final adjacentcyMatrix with the assign colors in the diagonal of the matrix. 

*******************************
III. Data structure:
*******************************
	
 A graphColoring class
    - adjacencyMatrix: a n by n adjacent matrix for the graph.
    - uncolorNode
    - newColor // 1, 2, 3, ... (Red, Green, Blue, Yallow, Purple, Orange, Black, ...)
    
	
               
*******************************
III. Algorithm steps
*******************************

step 0: numNode <-- get from input file
	  - dynamically allocate adjacencyMatrix // initiallize to 0
	  - load adjacencyMatrix from the input pairs
 	  - print adjacencyMatrix
	
	- newColor <-- 0

		// get new new color (using 1, 2, 3, ... as the color scheme)
step 1: newColor ++
	
	//use the newColor to color as many un-colored nodes as possible 
Step 2: uncolorNode <-- get an uncolor node // check adjacentMatrix [i][i] == 0 
	   if newNode does not have any adjacent node that are already colored with the newColor
				// check adjancyMatrix
	      adjacentMatrix[uncolorNode][uncolorNode] <-- newColor

Step 3: repeat step 2 until all uncolored nodes are checked.

Step 4: print adjacencyMatrix 

Step 5: repeat steps 1 to 3 until all nodes are colored.

Step 6: print adjacencyMatrix 

	